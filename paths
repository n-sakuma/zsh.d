# vim: ft=zsh
# -*- mode:shell-script -*-

#   typeset
#    -U 重複パスを登録しない
#    -x exportも同時に行う
#    -T 環境変数へ紐付け
#
#   path=xxxx(N-/)
#     (N-/): 存在しないディレクトリは登録しない
#     パス(...): ...という条件にマッチするパスのみ残す
#        N: NULL_GLOBオプションを設定。
#           globがマッチしなかったり存在しないパスを無視する
#        -: シンボリックリンク先のパスを評価
#        /: ディレクトリのみ残す
#        .: 通常のファイルのみ残す


## 重複パスを登録しない
typeset -U path cdpath fpath manpath


##
# コード補完

# 拡張用の補完パス
fpath=($ZSH_HOME/completions $fpath)


## sudo用のpathを設定
if [ "$(uname)" = 'Darwin' ]; then
  typeset -xT SUDO_PATH sudo_path
  typeset -U sudo_path
  sudo_path=({/usr/local,/usr,}/sbin(N-/))
fi

## pathを設定
path=(~/bin(N-/) /usr/local/bin(N-/) ${path})

##
# basic

if [ -x /usr/libexec/path_helper ]; then
    # /etc/paths を修正して優先順位を決める
    eval `/usr/libexec/path_helper -s`
else
    PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:$PATH
fi

##
#  my program
if [ -x $HOME/bin ]; then
    PATH=$HOME/bin:$PATH
fi

# Each env path
if [ -f $ZSH_HOME/conf/env/$(uname).path ]; then
  source $ZSH_HOME/conf/env/$(uname).path
fi


##############################################
##
##     Programing Language
##

##
# clojure

# export CLOJURE_EXT=‾/.clojure

if [[ -d /usr/local/Cellar/clojure-contrib/1.2.0 ]]; then
    export CLASSPATH=$CLASSPATH:/usr/local/Cellar/clojure-contrib/1.2.0/clojure-contrib.jar
fi

if [[ -d /opt/local/share/java/clojure/lib ]]; then
    export CLASSPATH=$CLASSPATH:/opt/local/share/java/clojure/lib/clojure-contrib.jar
fi


##
# Scheme
if [[ -d /usr/local/lib/slib/ ]]; then
    export SCHEME_LIBRARY_PATH="/usr/local/lib/slib/"
fi


##
# Ruby

##
# switch rbenv or rvm
export MY_RUBY_MANAGEMENT_TOOL='rbenv'  # or rvm

if [[ $MY_RUBY_MANAGEMENT_TOOL = 'rbenv' ]]; then
  # To use Homebrew's directories rather than ~/.rbenv add to your profile:
  # export RBENV_ROOT=/usr/local/var/rbenv
  export RBENV_ROOT=$HOME/.rbenv

  # eval "$(rbenv init -)" zshの挙動がおかしくなるから自分で設定する
  export RBENV_SHELL=zsh
  export PATH=$HOME/.rbenv/bin:$PATH
  export PATH=$HOME/.rbenv/shims:$PATH

  # source $RBENV_ROOT/completions/rbenv.zsh
  source $ZSH_HOME/conf/rbenv.zsh

else # RVM
  ##  rvm (Ruby Version Manager)
  [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  [[ -s "$HOME/.rvm/scripts/extras/rails" ]] && . "$HOME/.rvm/scripts/extras/rails"
fi

# Gems
### require 'rubygems' を省略できる
# export RUBYOPT=rubygems

where ruby > /dev/null
if [ $? -eq 0 ]; then
    RUBY_EXECUTE_PATH=$(/usr/bin/env ruby -e "require 'rubygems'; puts Gem::bindir")
    PATH=$PATH:$RUBY_EXECUTE_PATH
fi
#export RUBYPATH=/opt/local/lib/ruby/gems/1.8/gems:$RUBYPATH
#export RUBYPATH=/opt/local/lib/ruby/vendor_ruby/1.8
#/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/gems/1.8/gems:$PATH

##
# Andoroid tools

# for Mac
AndroidSDKRevision=r20
if [[ -d /Applications/AndroidSDK/$AndroidSDKRevision ]]; then
    PATH=$PATH:/Applications/AndroidSDK/$AndroidSDKRevision/platform-tools
    PATH=$PATH:/Applications/AndroidSDK/$AndroidSDKRevision/tools
fi


##
# node.js

# nodenv
where nodenv > /dev/null
if [ $? -eq 0 ]; then
  PATH="$HOME/.nodenv/bin:$PATH"
  eval "$(nodenv init -)"
fi

if [[ -d $HOME/.nodebrew ]]; then
    PATH=$PATH:$HOME/.nodebrew/current/bin
    export NODE_PATH=$HOME/.nodebrew/current/lib/node_modules:$NODE_PATH
    export NODE_PATH=$HOME/.nodebrew/current/lib:$NODE_PATH
fi

# npm
if [[ -d /usr/local/share/npm/bin ]]; then
    PATH=$PATH:/usr/local/share/npm/bin
fi


##
# Python (pyenv)
#
export PYENV_ROOT="${HOME}/.pyenv"
if [[ ! -d "${PYENV_ROOT}" ]]; then
  git clone https://github.com/yyuu/pyenv.git $PYENV_ROOT
fi
PATH=${PYENV_ROOT}/bin:${PYENV_ROOT}/shims:${PATH}
export PYENV_SHELL=zsh
source $ZSH_HOME/conf/pyenv.zsh

##
# GAE
gae_sdk_enabled=false
if [[ $gae_sdk_enabled = true ]]; then
  gae_sdk_path=$HOME/google-cloud-sdk
  if [[ ! -d $gae_sdk_path ]]; then
    echo "Not install GAE SDK"
    echo "curl https://sdk.cloud.google.com | bash"
  fi

  if [[ -d $gae_sdk_path ]]; then
    source $gae_sdk_path/path.zsh.inc
  fi
fi

export PATH
