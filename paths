# -*- mode:shell-script -*-

#   typeset
#    -U 重複パスを登録しない
#    -x exportも同時に行う
#    -T 環境変数へ紐付け
#
#   path=xxxx(N-/)
#     (N-/): 存在しないディレクトリは登録しない
#     パス(...): ...という条件にマッチするパスのみ残す
#        N: NULL_GLOBオプションを設定。
#           globがマッチしなかったり存在しないパスを無視する
#        -: シンボリックリンク先のパスを評価
#        /: ディレクトリのみ残す
#        .: 通常のファイルのみ残す


## 重複パスを登録しない
typeset -U path cdpath fpath manpath

## sudo用のpathを設定
typeset -xT SUDO_PATH sudo_path
typeset -U sudo_path
sudo_path=({/usr/local,/usr,}/sbin(N-/))

## pathを設定
path=(~/bin(N-/) /usr/local/bin(N-/) ${path})

##
# basic

if [ -x /usr/libexec/path_helper ]; then
    # /etc/paths を修正して優先順位を決める
    eval `/usr/libexec/path_helper -s`
else
    PATH=/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/X11/bin:$PATH
fi

##
#  my program
if [ -x $HOME/bin ]; then
    PATH=$HOME/bin:$PATH
fi

##
# MacPorts

if [[ -d /opt/local ]]; then
    PortsBinPaths=( "/opt/local/bin" "/opt/local/sbin" )
    for port_path in ${PortsBinPaths[*]}; do
        if [[ -d $( echo ${port_path} ) ]]; then
            PATH=$PATH:${port_path}
        fi
    done

    # DYLD_FALLBACK_LIBRARY_PATH=/opt/local/lib; export DYLD_FALLBACK_LIBRARY_PATH

    # man
    export MANPATH=/opt/local/share/man:$MANPATH
fi

##
# coreutils
#
# for Macports
# if [[ -d /opt/local/libexec/gnubin ]]; then
#     export PATH=/opt/local/libexec/gnubin:$PATH
# fi
# for homebrew
if [[ -d /usr/local/opt/coreutils/libexec/gnubin ]]; then
    PATH=/usr/local/opt/coreutils/libexec/gnubin:$PATH
fi

##############################################
##
##     Programing Language
##

##
# clojure

# export CLOJURE_EXT=‾/.clojure

if [[ -d /usr/local/Cellar/clojure-contrib/1.2.0 ]]; then
    export CLASSPATH=$CLASSPATH:/usr/local/Cellar/clojure-contrib/1.2.0/clojure-contrib.jar
fi

if [[ -d /opt/local/share/java/clojure/lib ]]; then
    export CLASSPATH=$CLASSPATH:/opt/local/share/java/clojure/lib/clojure-contrib.jar
fi


##
# Scheme
if [[ -d /usr/local/lib/slib/ ]]; then
    export SCHEME_LIBRARY_PATH="/usr/local/lib/slib/"
fi


##
# Ruby

##  rvm (Ruby Version Manager)
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/extras/rails" ]] && . "$HOME/.rvm/scripts/extras/rails"

# RVM_PATHS=( "$HOME/.rvm/bin" "$HOME/.rvm/usr/bin" )
# for RVM_PATH in ${RVM_PATHS[*]}; do
#     if [[ -d $RVM_PATH ]]; then
#         export PATH=$RVM_PATH:$PATH
#     fi
# done

# Gems
### require 'rubygems' を省略できる
# export RUBYOPT=rubygems

where ruby > /dev/null
if [ $? -eq 0 ]; then
    RUBY_EXECUTE_PATH=$(/usr/bin/env ruby -e "require 'rubygems'; puts Gem::bindir")
    PATH=$PATH:$RUBY_EXECUTE_PATH
fi
#export RUBYPATH=/opt/local/lib/ruby/gems/1.8/gems:$RUBYPATH
#export RUBYPATH=/opt/local/lib/ruby/vendor_ruby/1.8
#/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/lib/ruby/gems/1.8/gems:$PATH

##
# Andoroid tools

# for Mac
AndroidSDKRevision=r20
if [[ -d /Applications/AndroidSDK/$AndroidSDKRevision ]]; then
    PATH=$PATH:/Applications/AndroidSDK/$AndroidSDKRevision/platform-tools
    PATH=$PATH:/Applications/AndroidSDK/$AndroidSDKRevision/tools
fi


##
# node.js

if [[ -d $HOME/.nodebrew ]]; then
    PATH=$PATH:$HOME/.nodebrew/current/bin
    export NODE_PATH=$HOME/.nodebrew/current/lib/node_modules:$NODE_PATH
    export NODE_PATH=$HOME/.nodebrew/current/lib:$NODE_PATH
fi

# npm
if [[ -d /usr/local/share/npm/bin ]]; then
    PATH=$PATH:/usr/local/share/npm/bin
fi


##
# Python

# for Homebrew
if [[ -d /usr/local/share/python ]]; then
    PATH=$PATH:/usr/local/share/python
fi

if [[ -d /usr/local/lib/python2.7/site-packages ]]; then
    export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
fi

export PATH
